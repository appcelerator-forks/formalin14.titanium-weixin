/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package com.biddecor.weixin;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;

import org.appcelerator.titanium.TiApplication;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;
import com.tencent.mm.sdk.openapi.*;
import com.tencent.mm.sdk.modelpay.*;

import java.util.*;
import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;
import java.security.MessageDigest;
import com.biddecor.BidDecor.wxapi.WXPayEntryActivity;
import com.biddecor.weixin.Constants;

@Kroll.module(name="Weixin", id="com.biddecor.weixin")
public class WeixinModule extends KrollModule
{

    // Standard Debugging variables
    private static final String LCAT = "WeixinModule";
    private static final boolean DBG = TiConfig.LOGD;

    //final IWXAPI msgApi = WXAPIFactory.createWXAPI(this.getActivity(), null);
    private IWXAPI msgApi = null;
    
    // You can define constants with @Kroll.constant, for example:
    // @Kroll.constant public static final String EXTERNAL_NAME = value;

    public WeixinModule()
    {
        super();
    }

    @Kroll.onAppCreate
    public static void onAppCreate(TiApplication app)
    {
        Log.d(LCAT, "inside onAppCreate");
        // put module init code that needs to run when the application is created
    }

    // Methods
    @Kroll.method
    public String example()
    {
        Log.d(LCAT, "example called");
        return "hello world";
    }

    @Kroll.method
    public boolean initSetup(String appId, String partnerId, String key) {
        Constants.appId = appId;
        Constants.partnerId = partnerId;
        Constants.key = key;
        msgApi = WXAPIFactory.createWXAPI(this.getActivity(), null);
        Log.d(LCAT, "initSetup completed");
        return this.registerApp();
    }

    @Kroll.method
    public boolean registerApp() {
        if (msgApi.isWXAppInstalled()) {
            boolean r = msgApi.registerApp(Constants.appId);
            Log.d(LCAT, "registerApp result: " + r);
            return r;
        } else {
            Log.e(LCAT, "no Weixin installed");
            return false;
        }
    }

    private String genNonceStr() {
        Random random = new Random();
        return getMessageDigest(String.valueOf(random.nextInt(10000)).getBytes());
    }
    
    private long genTimeStamp() {
        return System.currentTimeMillis() / 1000;
    }

    public final static String getMessageDigest(byte[] buffer) {
        char hexDigits[] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };
        try {
            MessageDigest mdTemp = MessageDigest.getInstance("MD5");
            mdTemp.update(buffer);
            byte[] md = mdTemp.digest();
            int j = md.length;
            char str[] = new char[j * 2];
            int k = 0;
            for (int i = 0; i < j; i++) {
                byte byte0 = md[i];
                str[k++] = hexDigits[byte0 >>> 4 & 0xf];
                str[k++] = hexDigits[byte0 & 0xf];
            }
            return new String(str);
        } catch (Exception e) {
            return null;
        }
    }

    private String genAppSign(List<NameValuePair> params) {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < params.size(); i++) {
            sb.append(params.get(i).getName());
            sb.append('=');
            sb.append(params.get(i).getValue());
            sb.append('&');
        }
        sb.append("key=");
        sb.append(Constants.key);
        Log.d(LCAT, "sign before: " + sb.toString());
        String appSign = getMessageDigest(sb.toString().getBytes()).toUpperCase();
        return appSign;
    }
    
    @Kroll.method
    public void pay(String prepayId) {
        PayReq req = new PayReq();
        req.appId = Constants.appId;
        req.partnerId = Constants.partnerId;
        req.prepayId = prepayId;
        req.packageValue = "Sign=WXPay";
        req.nonceStr = genNonceStr();
        req.timeStamp = String.valueOf(genTimeStamp());

        List<NameValuePair> signParams = new LinkedList<NameValuePair>();
        signParams.add(new BasicNameValuePair("appid", req.appId));
        signParams.add(new BasicNameValuePair("noncestr", req.nonceStr));
        signParams.add(new BasicNameValuePair("package", req.packageValue));
        signParams.add(new BasicNameValuePair("partnerid", req.partnerId));
        signParams.add(new BasicNameValuePair("prepayid", req.prepayId));
        signParams.add(new BasicNameValuePair("timestamp", req.timeStamp));

        req.sign = genAppSign(signParams);
        
        boolean r = msgApi.sendReq(req);
        Log.d(LCAT, "start pay result: " + r);
    }
    
    // Properties
    @Kroll.getProperty
    public String getExampleProp()
    {
        Log.d(LCAT, "get example property");
        return "hello world";
    }


    @Kroll.setProperty
    public void setExampleProp(String value) {
        Log.d(LCAT, "set example property: " + value);
    }

}

